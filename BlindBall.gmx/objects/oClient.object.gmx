<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the client
clientx = 64;   // player start X and Y
clienty = 192;
PlayerName=global.ServerName;   // get the name that was selected (it's a server OR player name)

winfx=0; losefx=0;

for(i=0;i&lt;4;i+=1){
    tweet[i] = false;
    tweet2[i] = false;
    }

// Create a buffer for the network messages
buff = buffer_create(256, buffer_grow, 1);
// Create a TCP/IP socket
client = network_create_socket(global.ServerType);
// remember this socket ID so the server can ignore it (if we have a local server)
global.client = client;
// We're playing!!
global.NetworkState = NETWORK_PLAY;

// Create a list to hold ALL sprites sent from the server
allsprites = ds_list_create();
sprites = 0;

// Connect to our server
var err = network_connect(client, global.connectip, 6510);
if( err!=0 ){
    // if we can't connect, show and error and restart... could be more graceful :)
    show_message("Error - can not connect to server!!");
    game_restart();
}

// Client has connected to the server, so send our "player name"
SendName( PlayerName );
alarm[0]=120;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send keep alive "ping" to server
SendKeepAlive();
alarm[0]=120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking code
var eventid = ds_map_find_value(async_load, "id");

// Our socket?
if( client == eventid )
{
    switch(global.NetworkState)
    {
        case NETWORK_PLAY :
        {
            // Read all data....
            var buff = ds_map_find_value(async_load, "buffer");
            
            // Get number of sprites sent
            sprites = buffer_read(buff, buffer_u32 ); 
            
            // Read out OUR location (allow scrolling maps)
            clientx = buffer_read(buff,buffer_s16);     //x
            clienty = buffer_read(buff,buffer_s16);     //y
        
            // Now clear the render list, and start filling it up with NEW data!
            ds_list_clear(allsprites);
            for(var i=0;i&lt;sprites;i++){
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //x
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //y
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //sprite_index
                //ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //image_index
                ds_list_add(allsprites, buffer_read(buff,buffer_f32) );     //image_blend        
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );  // player name
            }
            
           winfx = buffer_read(buff, buffer_f32 ); 
           losefx = buffer_read(buff, buffer_f32 ); 
           
           for(i=0;i&lt;4;i+=1){
           tweet[i] = buffer_read(buff, buffer_f32 );
           tweet2[i] = buffer_read(buff, buffer_f32 );
           }  
        }    
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all sprites in level

// set the X and Y of the client so the room "follows" our player
x = clientx;
y = clienty;

// Now loop through all active sprites and draw them
var index = 0;
for(i=0;i&lt;sprites;i++){
    var xx,yy,sp,spindex, col,name;
    
    xx = ds_list_find_value(allsprites,index++); //show_message(string(i)+", xx= "+string(ds_list_find_value(allsprites,index-1)));
    yy = ds_list_find_value(allsprites,index++); //show_message(string(i)+", yy= "+string(ds_list_find_value(allsprites,index-1)));
    sp = ds_list_find_value(allsprites,index++); //show_message(string(i)+", sp= "+string(ds_list_find_value(allsprites,index-1)));
    //spindex = ds_list_find_value(allsprites,index++); show_message(string(i)+", spindex= "+string(ds_list_find_value(allsprites,index-1)));
    col = ds_list_find_value(allsprites,index++); //show_message(string(i)+", col= "+string(ds_list_find_value(allsprites,index-1)));
    name = ds_list_find_value(allsprites,index++);// show_message(string(i)+", name= "+string(ds_list_find_value(allsprites,index-1)));

//waste = ds_list_find_value(allsprites,index++); show_message(string(i)+", waste= "+string(ds_list_find_value(allsprites,index-1)));
    
    if sp=sSpikes{
    if instance_exists(oServer){if name!=2 or losefx&gt;0{draw_sprite_ext(sp,0,xx,yy,1,1,col,c_white,1.0);}}
    else{if name!=1 or losefx&gt;0{draw_sprite_ext(sp,0,xx,yy,1,1,col,c_white,1.0);}}
    }
    else
    {
    draw_sprite_ext(sp,0,xx,yy,1,1,col,c_white,1.0);
    }

    
    if sp = sGoal{
    gx = xx; gy = yy;
    }
    
    
    if sp = sPlayer{
    px=xx; py=yy;
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(sGuide,0,xx,yy,1,1,point_direction(xx,yy,gx,gy),c_white,.5);
    draw_set_blend_mode(bm_normal);
    }
    
    draw_set_color(c_white);
    draw_set_font(fScore);
    draw_set_halign(fa_center);
    //draw_text(xx+16,yy-20,name);
}

//with(oServer){
draw_set_color(c_lime);
for(i=0;i&lt;4;i+=1){draw_set_alpha(power(tweet[i],1/4)); draw_circle(px+lengthdir_x(60,i*90),py+lengthdir_y(60,i*90),(1-sqr(tweet[i]))*30,true);}
draw_set_color(c_fuchsia);
for(i=0;i&lt;4;i+=1){draw_set_alpha(power(tweet2[i],1/4)); draw_circle(px+lengthdir_x(60,i*90),py+lengthdir_y(60,i*90),(1-sqr(tweet2[i]))*30,true);}
//}

draw_set_alpha(.75);
draw_set_color(c_red); draw_circle(view_xview+320,view_yview+240,sqr(losefx)*sqrt(sqr(320)+sqr(320)),false);
draw_set_color(c_blue); draw_circle(view_xview+320,view_yview+240,sqr(winfx)*sqrt(sqr(320)+sqr(320)),false);

draw_set_alpha(power(losefx,3)); draw_set_halign(fa_left);
draw_set_color(c_white); draw_text(view_xview+100,view_yview+100,"Lose.");

draw_set_alpha(power(winfx,3));
draw_set_color(c_white); draw_text(view_xview+100,view_yview+100,"Win.");

draw_set_halign(fa_center); draw_set_alpha(power(max(winfx,losefx),3));
draw_text(view_xview+(view_wview/2),view_yview+(view_hview/2),"Press space.");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server UP was pressed
SendKey(ord('W'),1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server UP was pressed
SendKey(ord('S'),1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server UP was pressed
SendKey(ord('D'),1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server UP was pressed
SendKey(ord('A'),1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server DOWN was pressed
SendKey(vk_down,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server RIGHT was pressed
SendKey(vk_right,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server UP was pressed
SendKey(vk_up,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server LEFT was pressed
SendKey(vk_left,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server DOWN was released
SendKey(vk_down,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server RIGHT was released
SendKey(vk_right,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server UP was released.
SendKey(vk_up,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server LEFT was released
SendKey(vk_left,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
